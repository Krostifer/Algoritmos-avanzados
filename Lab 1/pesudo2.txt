Estructura Elemento
	num valor
	num ponderacion
	
Elemento crearElemento(num valorNuevo, num ponderacionNuevo)
	Elemento nuevoElemento																																									(1)
	nuevoElemento.valor = valorNuevo																																						(1)
	nuevoElemento.ponderacion = ponderacionNuevo																																			(1)
	
	RETURN nuevoElemento																																									(1)
	
	*******************************************************	
	T(n) = 4
	O(1)
	*******************************************************	
	
Void aumentarBinario(Array caracter numeroBinario, num largo)
	IF numeroBinario[largo-1] = '0' THEN												1
		numeroBinario[largo-1] = '1'													1
		RETURN																			1
	
	ELSE IF numeroBinario[largo-1] = '1' THEN											1
		numeroBinario[largo-1] = '0'													1
		FOR num i=largo-2 TO 0															n-1
			IF numeroBinario[i] = '0' THEN												(n-1)
				numeroBinario[i] = '1'													(n-1)
				RETURN																	(n-1)
				
			ELSE																		(n-1)
				numeroBinario[i] = '0'													(n-1)
			
			i = i - 1																	(n-1)
			
		
void crearBinario(Array caracter numeroBinario, num largo)
	FOR num i=0 TO largo-1
		numeroBinario[i] = '0'

void generarCombinaciones(Array Elemento listaElementos, num cantElementos, Array caracter numeroBinario, num limite ponderacion, num mayorSumaEncontrada)
	aumentarBinario(numeroBinario, cantElementos)
	num sumaValorActual = 0																																												1
	num sumaPonderacionActual = 0																																										1
	
	FOR num i=cantElementos-1 TO 0																																										n
		IF numeroBinario[i] = '1' THEN																											
			sumaValorActual = sumaValorActual + listaElementos[i].valor																																	n
			sumaPonderacionActual = sumaPonderacionActual + listaElementos[i].ponderacion																												n
		
		IF sumaPonderacionActual > limitePonderacion THEN
			RETURN
		
	IF sumaPonderacionActual <= limitePonderacion THEN																																					1
		IF sumaValorActual > mayorSumaEncontrada THEN																																					1
			mayorSumaEncontrada = sumaValorActual																																						1
			
		RETURN																																															1


array Elemento leerArchivo (char nombreEntrada, direc num cantidadElementos, direc num limitePonderacion, direct num mayorSumaValoresEncontrada)
	FILE archivoEntrada																																										(1)
	//Se abre el archivo de entrada																																							(1)
	
	num valor																																												(1)
	num ponderacion																																											(1)
	
	//Extrar la cantidad de elementos y limite de ponderacion del nombreEntrada																												(1)
	cantidadElementos = leerArchivoEntrada(archivoEntrada)																																	(1)
	limitePonderacion = leerArchivoEntrada(archivoEntrada)																																	(1)
	
	array Elemento listaElementos[cantidadElementos]																																		(1)
	
	FOR i=0 TO cantElementos-1																																								(n)
		valor = leerElemento(archivoEntrada)																																				(n)
		ponderacion = leerElemento(archivoEntrada)																																			(n)
		listaElementos[i] = crearElemento(valor, ponderacion)																																n(4)
		
		IF valor > mayorSumaValoresEncontrada THEN																																			(n)
			mayorSumaValoresEncontrada = valor																																				(n)
		
		i = i + 1																																											(n)
		
	RETURN listaElementos																																									(n)
	
	*******************************************************		
	T(n) = 12 + 11n	
	O(n)	
	*******************************************************
	
MAIN:
	
	num cantidadElementos																																									1
	num limitePonderacion																																									1
	num mayorSumaEncontrada = 0																																								1
	
	Elemento listaElementos = leerArchivoEntrada(nombreArchivo, cantElementos, limitePonderacion, mayorSumaEncontrada)																		(12+11n)
	
	Array caracter binarioCombinaciones[cantElementos]																																		1
	
	crearBinario(binarioCombinaciones, cantElementos)																																		(2n)
	
	FOR num i=1 TO 2^cantElementos																																							(2^n)
		generarCombinaciones(listaElementos, cantidadElementos, binarioCombinaciones, limitePonderacion, mayorSumaEncontrada)																(2^n)(6+3n)
		
	MOSTRAR mayorSumaEncontrada																																								1